'use client'

import React, { useState, useEffect, useCallback } from 'react'

interface NumberData {
  number: number;
  english: string;
}

const NUMBERS_DATA = [
  { number: 1, english: 'one' },
  { number: 2, english: 'two' },
  { number: 3, english: 'three' },
  { number: 4, english: 'four' },
  { number: 5, english: 'five' },
  { number: 6, english: 'six' },
  { number: 7, english: 'seven' },
  { number: 8, english: 'eight' },
  { number: 9, english: 'nine' },
  { number: 10, english: 'ten' }
]

const GAME_MODES = {
  NUMBER_TO_ENGLISH: 'number_to_english',
  ENGLISH_TO_NUMBER: 'english_to_number',
  SPELLING: 'spelling'
}

export default function EnglishNumbersGame() {
  const [gameMode, setGameMode] = useState(null)
  //const [currentQuestion, setCurrentQuestion] = useState(null)
  const [currentQuestion, setCurrentQuestion] = useState<NumberData | null>(null);
  const [score, setScore] = useState(0)
  const [streak, setStreak] = useState(0)
  const [questionCount, setQuestionCount] = useState(0)
  const [totalQuestions] = useState(20)
  const [gameOver, setGameOver] = useState(false)
  const [feedback, setFeedback] = useState(null)
  //const [options, setOptions] = useState([])
  //const [options, setOptions] = useState<string[]>([]);
  const [options, setOptions] = useState<string[] | number[]>([]);
  const [spellingInput, setSpellingInput] = useState('')
  const [showHint, setShowHint] = useState(false)

  // 生成隨機問題
  const generateQuestion = useCallback(() => {
    const randomItem = NUMBERS_DATA[Math.floor(Math.random() * NUMBERS_DATA.length)]
    setCurrentQuestion(randomItem)
    setFeedback(null)
    setShowHint(false)
    setSpellingInput('')

    if (gameMode === GAME_MODES.NUMBER_TO_ENGLISH) {
      // 生成4個選項，包含正確答案
      const correctAnswer = randomItem.english
      const wrongAnswers = NUMBERS_DATA
        .filter(item => item.english !== correctAnswer)
        .sort(() => Math.random() - 0.5)
        .slice(0, 3)
        .map(item => item.english)
      
      const allOptions = [correctAnswer, ...wrongAnswers].sort(() => Math.random() - 0.5)
      setOptions(allOptions)
    } else if (gameMode === GAME_MODES.ENGLISH_TO_NUMBER) {
      // 生成4個數字選項
      const correctAnswer = randomItem.number
      const wrongAnswers = NUMBERS_DATA
        .filter(item => item.number !== correctAnswer)
        .sort(() => Math.random() - 0.5)
        .slice(0, 3)
        .map(item => item.number)
      
      const allOptions = [correctAnswer, ...wrongAnswers].sort(() => Math.random() - 0.5)
      setOptions(allOptions)
    }
  }, [gameMode])

  // 開始遊戲
  //const startGame = (mode) => {
  const startGame = (mode: string) => {
    setGameMode(mode)
    setScore(0)
    setStreak(0)
    setQuestionCount(0)
    setGameOver(false)
    setFeedback(null)
  }

  // 處理答案選擇
  const handleAnswer = (selectedAnswer) => {
    const isCorrect = gameMode === GAME_MODES.NUMBER_TO_ENGLISH 
      ? selectedAnswer === currentQuestion.english
      : selectedAnswer === currentQuestion.number

    if (isCorrect) {
      setScore(prev => prev + 10 + streak * 2) // 連續答對有獎勵分數
      setStreak(prev => prev + 1)
      setFeedback({ type: 'correct', message: '答對了！' + (streak >= 2 ? ` 連續答對 ${streak + 1} 題！` : '') })
    } else {
      setStreak(0)
      setFeedback({ 
        type: 'wrong', 
        message: `答錯了！正確答案是 ${gameMode === GAME_MODES.NUMBER_TO_ENGLISH ? currentQuestion.english : currentQuestion.number}` 
      })
    }

    setQuestionCount(prev => prev + 1)
    
    if (questionCount + 1 >= totalQuestions) {
      setTimeout(() => setGameOver(true), 1500)
    } else {
      setTimeout(() => generateQuestion(), 1500)
    }
  }

  // 處理拼字答案
  const handleSpellingSubmit = () => {
    const isCorrect = spellingInput.toLowerCase().trim() === currentQuestion.english.toLowerCase()
    
    if (isCorrect) {
      setScore(prev => prev + 15 + streak * 2) // 拼字模式分數更高
      setStreak(prev => prev + 1)
      setFeedback({ type: 'correct', message: '拼字正確！' + (streak >= 2 ? ` 連續答對 ${streak + 1} 題！` : '') })
    } else {
      setStreak(0)
      setFeedback({ 
        type: 'wrong', 
        message: `拼字錯誤！正確拼法是 "${currentQuestion.english}"` 
      })
    }

    setQuestionCount(prev => prev + 1)
    
    if (questionCount + 1 >= totalQuestions) {
      setTimeout(() => setGameOver(true), 1500)
    } else {
      setTimeout(() => generateQuestion(), 1500)
    }
  }

  // 顯示提示
  const toggleHint = () => {
    setShowHint(!showHint)
  }

  // 重新開始
  const resetGame = () => {
    setGameMode(null)
    setCurrentQuestion(null)
    setScore(0)
    setStreak(0)
    setQuestionCount(0)
    setGameOver(false)
    setFeedback(null)
    setOptions([])
    setSpellingInput('')
    setShowHint(false)
  }

  // 當遊戲模式改變時生成第一個問題
  useEffect(() => {
    if (gameMode && !gameOver) {
      generateQuestion()
    }
  }, [gameMode, generateQuestion, gameOver])

  // 主選單
  if (!gameMode) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-500 via-purple-600 to-pink-500 text-white p-4">
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 max-w-md w-full text-center">
          <h1 className="text-4xl font-bold mb-2">📚 背英文單字</h1>
          <p className="text-xl mb-8 opacity-90">數字 1-10 學習遊戲</p>
          
          <div className="space-y-4">
            <button
              onClick={() => startGame(GAME_MODES.NUMBER_TO_ENGLISH)}
              className="w-full bg-green-500 hover:bg-green-600 text-white font-bold py-4 px-6 rounded-xl transition-all transform hover:scale-105 shadow-lg"
            >
              🔢 看數字選英文
            </button>
            
            <button
              onClick={() => startGame(GAME_MODES.ENGLISH_TO_NUMBER)}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-4 px-6 rounded-xl transition-all transform hover:scale-105 shadow-lg"
            >
              🔤 看英文選數字
            </button>
            
            <button
              onClick={() => startGame(GAME_MODES.SPELLING)}
              className="w-full bg-purple-500 hover:bg-purple-600 text-white font-bold py-4 px-6 rounded-xl transition-all transform hover:scale-105 shadow-lg"
            >
              ✏️ 拼字練習
            </button>
          </div>

          <div className="mt-8 text-sm opacity-75">
            <p>學習數字 1-10 的英文單字</p>
            <p>one, two, three, four, five, six, seven, eight, nine, ten</p>
          </div>
        </div>
      </div>
    )
  }

  // 遊戲結束畫面
  if (gameOver) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-500 via-purple-600 to-pink-500 text-white p-4">
        <div className="bg-white/10 backdrop-blur-md rounded-3xl p-8 max-w-md w-full text-center">
          <h2 className="text-3xl font-bold mb-4">🎉 遊戲結束！</h2>
          
          <div className="bg-white/20 rounded-2xl p-6 mb-6">
            <div className="text-2xl font-bold mb-2">最終分數</div>
            <div className="text-4xl font-bold text-yellow-300 mb-4">{score}</div>
            <div className="text-sm opacity-90">
              <p>答對率: {Math.round((score > 0 ? score / (totalQuestions * 10) : 0) * 100)}%</p>
              <p>總題數: {totalQuestions}</p>
            </div>
          </div>

          <div className="flex gap-4">
            <button
              onClick={() => startGame(gameMode)}
              className="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-4 rounded-xl transition-all"
            >
              再玩一次
            </button>
            <button
              onClick={resetGame}
              className="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-bold py-3 px-4 rounded-xl transition-all"
            >
              回主選單
            </button>
          </div>
        </div>
      </div>
    )
  }

  // 遊戲進行中
  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gradient-to-br from-blue-500 via-purple-600 to-pink-500 text-white p-4">
      <div className="bg-white/10 backdrop-blur-md rounded-3xl p-6 max-w-md w-full">
        {/* 遊戲狀態 */}
        <div className="flex justify-between items-center mb-6">
          <div className="text-sm">
            <div>分數: <span className="font-bold text-yellow-300">{score}</span></div>
            <div>連續: <span className="font-bold text-green-300">{streak}</span></div>
          </div>
          <div className="text-sm">
            題目: {questionCount + 1}/{totalQuestions}
          </div>
        </div>

        {/* 進度條 */}
        <div className="w-full bg-white/20 rounded-full h-2 mb-6">
          <div 
            className="bg-gradient-to-r from-green-400 to-blue-500 h-2 rounded-full transition-all"
            style={{ width: `${((questionCount) / totalQuestions) * 100}%` }}
          ></div>
        </div>

        {currentQuestion && (
          <div className="text-center">
            {/* 問題顯示 */}
            <div className="bg-white/20 rounded-2xl p-6 mb-6">
              {gameMode === GAME_MODES.NUMBER_TO_ENGLISH && (
                <>
                  <p className="text-lg mb-4">這個數字的英文是？</p>
                  <div className="text-6xl font-bold mb-4">{currentQuestion.number}</div>
                </>
              )}
              
              {gameMode === GAME_MODES.ENGLISH_TO_NUMBER && (
                <>
                  <p className="text-lg mb-4">這個英文單字代表哪個數字？</p>
                  <div className="text-4xl font-bold mb-4 capitalize">{currentQuestion.english}</div>
                </>
              )}
              
              {gameMode === GAME_MODES.SPELLING && (
                <>
                  <p className="text-lg mb-4">請拼出這個數字的英文單字</p>
                  <div className="text-6xl font-bold mb-4">{currentQuestion.number}</div>
                  
                  <div className="mt-4">
                    <input
                      type="text"
                      value={spellingInput}
                      onChange={(e) => setSpellingInput(e.target.value)}
                      placeholder="輸入英文單字"
                      className="w-full bg-white/20 text-white placeholder-white/60 rounded-xl px-4 py-3 text-center text-xl border-2 border-white/30 focus:border-white/60 focus:outline-none"
                      onKeyPress={(e) => e.key === 'Enter' && handleSpellingSubmit()}
                    />
                  </div>
                  
                  <div className="flex gap-2 mt-4">
                    <button
                      onClick={handleSpellingSubmit}
                      disabled={!spellingInput.trim()}
                      className="flex-1 bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white font-bold py-3 rounded-xl transition-all"
                    >
                      提交答案
                    </button>
                    <button
                      onClick={toggleHint}
                      className="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-4 rounded-xl transition-all"
                    >
                      💡
                    </button>
                  </div>
                  
                  {showHint && (
                    <div className="mt-4 text-sm bg-yellow-500/20 rounded-xl p-3">
                      提示: 單字長度為 {currentQuestion.english.length} 個字母
                    </div>
                  )}
                </>
              )}
            </div>

            {/* 選項 (非拼字模式) */}
            {gameMode !== GAME_MODES.SPELLING && (
              <div className="grid grid-cols-2 gap-3 mb-4">
                {options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleAnswer(option)}
                    className="bg-white/20 hover:bg-white/30 text-white font-bold py-4 px-4 rounded-xl transition-all transform hover:scale-105 text-lg"
                  >
                    {option}
                  </button>
                ))}
              </div>
            )}

            {/* 反饋訊息 */}
            {feedback && (
              <div className={`p-4 rounded-xl mb-4 ${
                feedback.type === 'correct' 
                  ? 'bg-green-500/30 text-green-100' 
                  : 'bg-red-500/30 text-red-100'
              }`}>
                {feedback.message}
              </div>
            )}
          </div>
        )}

        {/* 退出按鈕 */}
        <button
          onClick={resetGame}
          className="w-full bg-gray-500/50 hover:bg-gray-500/70 text-white font-bold py-2 px-4 rounded-xl transition-all"
        >
          回主選單
        </button>
      </div>
    </div>
  )
}